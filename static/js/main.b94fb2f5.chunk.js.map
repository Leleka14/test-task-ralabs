{"version":3,"sources":["components/HeaderComponent.js","redux/baseUrl.js","redux/ActionTypes.js","redux/ActionCreators.js","components/LoadingComponent.js","components/WeatherCardComponent.js","components/ForecastComponent.js","components/MainComponent.js","redux/reducers/weatherData.js","redux/reducers/currentCity.js","App.js","redux/configureStore.js","reportWebVitals.js","index.js"],"names":["HeaderComponent","className","weatherIcon","LOAD_WEATHER","WEATHER_ISLOADING","WEATHER_FAILED","LOAD_CURRENT_CITY","fetchWeather","city","dispatch","type","ActionTypes","console","log","fetch","then","response","ok","json","error","Error","status","statusText","errorMessage","data","payload","loadWeather","catch","err","fetchCurrentCity","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","loadCurrentCity","Loading","WeatherCardComponent","props","imgSrc","weather","icon","Date","date","getDate","Intl","DateTimeFormat","month","format","Row","alt","width","src","temp","pop","Math","round","wind_spd","rh","rain","clouds","wind","text","floor","random","createDescription","Arrow","connect","state","twoWeekWeather","Data","useState","currentCard","setCurrentCard","useEffect","createFormatedDate","newDate","RenderList","isLoading","ArrowLeft","ArrowRight","cards","map","el","id","onClick","datetime","height","min_temp","max_temp","Fragment","city_name","length","arrowLeft","arrowRight","wheel","scrollBy","translate","RenderDetailedWeather","currentCity","CurrentCity","setcity","changeOnlyCurrentCity","useCallback","onSubmit","value","submitInputHandler","placeholder","model","Button","color","action","region","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b94fb2f5.chunk.js","sourcesContent":["import React from 'react'\r\n \r\nconst HeaderComponent = () => {\r\n    return(\r\n        <h2 className=\"header\">Weather Portal</h2>\r\n    )\r\n}\r\n\r\nexport default HeaderComponent;","export const weatherAPI = `https://api.weatherbit.io/v2.0/forecast/daily`;\r\nexport const weatherAPIKey = `552d1850c10d4272aff7ab2676c84424`;\r\nexport const weatherIcon = `https://www.weatherbit.io/static/img/icons/`;\r\nexport const googleAPIKey = `AIzaSyBOWt0A4oqce6vMMSuwUcJdY0P3EOAESXo`;\r\nexport const reverseTrackAPIKey = `29503943e43100352ab460a761bd9a9c`","export const LOAD_WEATHER = 'LOAD_WEATHER';\r\nexport const WEATHER_ISLOADING = 'WEATHER_ISLOADING';\r\nexport const WEATHER_FAILED = 'WEATHER_FAILED';\r\n\r\nexport const LOAD_CURRENT_CITY = 'LOAD_CURRENT_CITY';\r\nexport const CURRENT_CITY_FAILED = 'CURRENT_CITY_FAILED';\r\n","\r\nimport * as ActionTypes from './ActionTypes';\r\nimport * as baseUrl from './baseUrl';\r\n\r\nexport const loadWeather = data => ({\r\n    type: ActionTypes.LOAD_WEATHER,\r\n    payload: data\r\n})\r\n\r\nexport const weatherIsLoading = () => ({\r\n    type: ActionTypes.WEATHER_ISLOADING\r\n})\r\n\r\nexport const weatherFailed = error => ({\r\n    type: ActionTypes.WEATHER_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const fetchWeather = (city) => dispatch => {\r\n    dispatch(weatherIsLoading(true));\r\n    console.log(city)\r\n    return fetch(`${baseUrl.weatherAPI}?city=${city}&key=${baseUrl.weatherAPIKey}`)\r\n        .then(response => {\r\n            if(response.ok) return response.json();\r\n            else{\r\n                var error = new Error('Error' + response.status + ': '+ response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            var errorMessage = new Error(error.errorMessage);\r\n            throw errorMessage;\r\n        })\r\n        .then(data => {\r\n            dispatch(loadWeather(data))\r\n        })\r\n        .catch(err => dispatch(weatherFailed(err.errorMessage)))\r\n}\r\n\r\nexport const loadCurrentCity = data => ({\r\n    type: ActionTypes.LOAD_CURRENT_CITY,\r\n    payload: data\r\n})\r\n\r\nexport const fetchCurrentCity = () => dispatch => {\r\n    \r\n    const getGeo = (position) => {\r\n        return fetch(`http://api.positionstack.com/v1/reverse?access_key=29503943e43100352ab460a761bd9a9c&query=${position.coords.latitude},${position.coords.longitude}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            dispatch(loadCurrentCity(data))\r\n        })\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(getGeo, console.log);\r\n}","import React from 'react';\r\n\r\nexport const Loading = () => {\r\n    return (\r\n        <div className=\"col col-12\">\r\n            <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\r\n            <p>Loading . . .</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Loading } from './LoadingComponent';\r\nimport { weatherIcon } from '../redux/baseUrl';\r\nimport { Row } from 'reactstrap';\r\n\r\nconst WeatherCardComponent = (props) => {\r\n\r\n    const createDescription = (temp, rain, clouds, wind) => {\r\n        let text = '';\r\n        let arrayForHotWeather = [\r\n            \"You should wear something light as it will be warm, more than 15°.\", \r\n            \"If i was you, i would wear shorts as it would be warm.\",\r\n            \"Don't wear anything with longsleeves, it will be warm.\"\r\n        ];\r\n        let arrayForCoolWeather = [\r\n            \"It would be cool weather.\",\r\n            \"Temperature wouldn't be too low, but wouldn't be too high either, be careful.\",\r\n            \"In my opinion this would be perfect temperature, not high, not low.\"\r\n        ];\r\n        let arrayForColdWeather = [\r\n            \"I recommend you to wear coat, temparature would be less than 10°.\",\r\n            \"Be careful, it seems like it's still cool weather, but it's not.\",\r\n            \"It's easy to catch a cold, you should put on something warm.\"\r\n        ];\r\n        let arrayForNoRain = [\r\n            \"No rain at all.\",\r\n            \"Gods of rain told me that they would be merciful this day.\",\r\n            \"Nothing will fall from sky, unless some bird will be flying over you.\"\r\n        ];\r\n        let arrayForSmallProbRain = [\r\n            \"It shouldn't be raining, but there is a small chance.\",\r\n            \"You should look at the sky from time to time, small chance of rain.\",\r\n            \"There is a small probability if rain.\"\r\n        ]\r\n        let arrayForRain = [\r\n            \"You really should take an umbrella, it would be raining.\",\r\n            \"There is a high chance of rain.\",\r\n            \"Don't plan anything outside, it would be raining.\"\r\n        ];\r\n        let arrayForClearSky = [\r\n            \"Sky would be clear.\"\r\n        ];\r\n        let arrayForClouds = [\r\n            \"It will cloudy.\"\r\n        ];\r\n        let arrayForHalfClouds = [\r\n            \"Half of sky will be in clouds.\"\r\n        ]\r\n        let arrayForWeakWind = [\r\n            \"Wind will be weak.\"\r\n        ];\r\n        let arrayForPowerWind = [\r\n            \"It also will be windy.\"\r\n        ];\r\n        if(temp >= 18) text += `${arrayForHotWeather[Math.floor(Math.random() * (3))]}`\r\n        if(temp >= 10 && temp < 18) text += ` ${arrayForCoolWeather[Math.floor(Math.random() * (3))]}`\r\n        if(temp < 10) text += ` ${arrayForColdWeather[Math.floor(Math.random() * (3))]}`\r\n        if(rain < 10) text += ` ${arrayForNoRain[Math.floor(Math.random() * (3))]}`\r\n        if(rain >= 10 && rain < 50) text += ` ${arrayForSmallProbRain[Math.floor(Math.random() * (3))]}`\r\n        if(rain >= 50) text += ` ${arrayForRain[Math.floor(Math.random() * (3))]}`\r\n        if(clouds >= 70) text += ` ${arrayForClouds[0]}`\r\n        if(clouds < 70 && clouds >= 30) text += ` ${arrayForHalfClouds[0]}`\r\n        if(clouds < 30) text += ` ${arrayForClearSky[0]}`\r\n        if(wind >= 5) text += ` ${arrayForPowerWind[0]}`\r\n        if(wind < 5) text += ` ${arrayForWeakWind[0]}`\r\n        return text;\r\n    };\r\n\r\n    const imgSrc = `${weatherIcon}${props.weather.weather.icon}.png`;\r\n    return(\r\n        <div className=\"col-md-6 weather-card-wrapper\">\r\n            <h4>Weather in {props.city} for {`${new Date(props.date).getDate()} ${new Intl.DateTimeFormat('en-US', {month: \"long\"}).format(new Date(props.date))}`}</h4>\r\n            <div className=\"weather-card container\">\r\n                <div className=\"weather-card-main\">\r\n                    <Row>\r\n                        <div className=\"col-sm-4 weather-card-main-image-wrapper\">\r\n                            <img className=\"weather-card-main-image\" alt=\"Not Found\" width=\"100px\" src={imgSrc}/>\r\n                        </div>\r\n                        <div className=\"weather-card-main-info col-sm-7\">\r\n                            <p>Average Temperature: {props.weather.temp}°C</p>\r\n                            <p>Probability of Precipitation: {props.weather.pop}%</p>\r\n                            <p>Wind speed: {Math.round(props.weather.wind_spd)}m/s</p>\r\n                            <p>Humidity: {props.weather.rh}%</p>\r\n                        </div>\r\n                    </Row>\r\n                    <p>{createDescription(props.weather.temp, props.weather.pop, props.weather.clouds, props.weather.wind_spd)}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n            \r\n}\r\n\r\nexport default WeatherCardComponent;","import React, { useEffect, useState } from 'react';\r\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\r\nimport { Row } from 'reactstrap';\r\nimport { weatherIcon } from '../redux/baseUrl';\r\nimport { connect } from 'react-redux'\r\nimport { fetchWeather } from '../redux/ActionCreators';\r\nimport WeatherCardComponent from './WeatherCardComponent';\r\nimport { Loading } from './LoadingComponent';\r\n\r\n//function that passes state from store to props\r\nconst mapStateToProps = state => {\r\n    return{\r\n        twoWeekWeather: state.Data\r\n    }\r\n}\r\n\r\n//Function that allows us to call actions to form state \r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchWeather: (city) => dispatch(fetchWeather(city))\r\n})\r\n\r\n\r\nconst Arrow = ({ text, className }) => {\r\n    return (\r\n        <div className={className}>{text}</div>\r\n    );\r\n};    \r\n \r\nconst ForecastComponent = props => {\r\n\r\n    const [currentCard, setCurrentCard] = useState(0);\r\n\r\n    //Hook that executes when props.city is changed\r\n    useEffect(() => {\r\n        if(props.city) props.fetchWeather(props.city)\r\n    }, [props.city]);\r\n\r\n    const createFormatedDate = date => {\r\n        const newDate = new Date(date)\r\n        const formatDate = `${newDate.getDate()} ${new Intl.DateTimeFormat('en-US', {month: \"long\"}).format(newDate)}`\r\n        return formatDate;\r\n    }\r\n\r\n    const RenderList = () => {\r\n        if(props.twoWeekWeather.isLoading){\r\n            return <Loading/>\r\n        }\r\n\r\n        //Renders weather if it exists\r\n        if(props.twoWeekWeather.weather){\r\n            const ArrowLeft = Arrow({ text: '<', className: 'arrow-prev' });\r\n            const ArrowRight = Arrow({ text: '>', className: 'arrow-next' });\r\n\r\n            //Maps through weather array\r\n            const cards = props.twoWeekWeather.weather.data.map((el, id) => {\r\n                const imgSrc = `${weatherIcon}${el.weather.icon}.png`;\r\n                \r\n                return (\r\n                    <li onClick={() => setCurrentCard(id)} className=\"menu-item weather-list-element\" key={el.datetime}>\r\n                        <p>{createFormatedDate(el.datetime)}</p>\r\n                        <img alt=\"Not Found\" width=\"45px\" height=\"30px\" src={imgSrc}/>\r\n                        <Row>\r\n                            <p className=\"offset-1 col-4\"><small>min:</small><br/>{el.min_temp}°</p>\r\n                            <p className=\"offset-1 col-4\"><small>max:</small><br/>{el.max_temp}°</p>\r\n                        </Row>\r\n                    </li>\r\n                )\r\n            });\r\n            return(\r\n                <React.Fragment>\r\n                    <h2>Weather at {props.twoWeekWeather.weather.city_name}, {createFormatedDate(props.twoWeekWeather.weather.data[0].datetime)} - {createFormatedDate(props.twoWeekWeather.weather.data[props.twoWeekWeather.weather.data.length - 1].datetime)}</h2>\r\n                    <ScrollMenu\r\n                        data={cards}\r\n                        arrowLeft={ArrowLeft}\r\n                        arrowRight={ArrowRight}\r\n                        wheel={false}\r\n                        scrollBy={3}\r\n                        translate={1}\r\n                    />\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        else{\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    const RenderDetailedWeather = () => {\r\n        if(props.twoWeekWeather.weather){\r\n            return(\r\n                <WeatherCardComponent city={props.twoWeekWeather.weather.city_name} date={props.twoWeekWeather.weather.data[currentCard].datetime} weather={props.twoWeekWeather.weather.data[currentCard]}/>\r\n            )\r\n        }\r\n        else{\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <RenderList/>\r\n            <RenderDetailedWeather/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForecastComponent);","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Button, Row } from 'reactstrap';\r\nimport HeaderComponent from './HeaderComponent';\r\nimport ForecastComponent from './ForecastComponent';\r\nimport { Control, LocalForm } from 'react-redux-form';\r\nimport { connect } from 'react-redux';\r\nimport { fetchCurrentCity } from '../redux/ActionCreators';\r\n\r\n//function that passes state from store to props\r\nconst mapStateToProps = state => {\r\n    return{\r\n        currentCity: state.CurrentCity.currentCity\r\n    }\r\n}\r\n\r\n//Function that allows us to call actions to form state \r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchCurrentCity: () => dispatch(fetchCurrentCity())\r\n})\r\n\r\nconst MainComponent = (props) => {\r\n\r\n    const [city, setcity] = useState('');\r\n\r\n    //Hook that executes only once after page is rendered to fetch city, equivalent to componentDidMount\r\n    useEffect(() => {\r\n        props.fetchCurrentCity();\r\n    }, [])\r\n\r\n    //Function that helps us to know when only props.currentCity is changed but not all props\r\n    const changeOnlyCurrentCity = useCallback(() => {\r\n        setcity(props.currentCity)\r\n    }, [props.currentCity]);\r\n    \r\n    useEffect(() => {\r\n        changeOnlyCurrentCity(props.currentCity);\r\n    }, [props.currentCity, changeOnlyCurrentCity]);\r\n\r\n    const submitInputHandler = (value) => {\r\n        if(value.city !== ''){\r\n            setcity(value.city)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <HeaderComponent/>\r\n            <LocalForm onSubmit={value => submitInputHandler(value)}>\r\n                <Row className=\"form-group\">\r\n                    <Control.text placeholder=\"Type city\" className=\"col-10 col-md-4 form-control\" model=\".city\"/>\r\n                    <Button type=\"submit\" className=\"col-2 col-md-1\" color=\"success\"><i className=\"fa fa-lg fa-search\"></i><sub>...</sub></Button>\r\n                </Row>\r\n            </LocalForm>\r\n            <ForecastComponent city={city}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainComponent);","import * as ActionTypes from '../ActionTypes';\r\n\r\nexport const Data = (state = {\r\n        isLoading: false,\r\n        errorMessage: null,\r\n        weather: null\r\n    }, action) => {\r\n    switch(action.type){\r\n        case ActionTypes.LOAD_WEATHER:\r\n            return {...state, isLoading: false, errorMessage: null, weather: action.payload}\r\n        case ActionTypes.WEATHER_ISLOADING:\r\n            return {...state, isLoading: true, errorMessage: null, weather: null};\r\n        case ActionTypes.WEATHER_FAILED:\r\n            return {...state, isLoading: false, errorMessage: action.payload, weather: null}\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as ActionTypes from '../ActionTypes';\r\n\r\nexport const CurrentCity = (state = {\r\n        currentCity: null\r\n    }, action) => {\r\n    switch(action.type){\r\n        case ActionTypes.LOAD_CURRENT_CITY:\r\n            return {currentCity: action.payload.data[0].region}\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport MainComponent from './components/MainComponent';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore()\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <MainComponent/>\n      </div>\n    </Provider>\n    \n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { Data } from './reducers/weatherData'\r\nimport { CurrentCity } from './reducers/currentCity';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            Data, \r\n            CurrentCity\r\n        }), \r\n        applyMiddleware(thunk, logger)\r\n    )\r\n    return store;\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}